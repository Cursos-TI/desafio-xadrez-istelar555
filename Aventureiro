#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

// -------- MOVIMENTO DAS PEÇAS (com contadores locais) --------

// TORRE: recursiva
void moverTorre(int casas, char direcao[], int *contador) {
    if (casas == 0) return;
    printf("Torre (%s)\n", direcao);
    (*contador)++;
    moverTorre(casas - 1, direcao, contador);
}

// BISPO: recursiva + loop aninhado
void moverBispo(int casas, int *contador) {
    if (casas == 0) return;
    printf("Bispo (Diagonal Direita-Cima)\n");
    (*contador)++;
    moverBispo(casas - 1, contador);
}

void moverBispoComLoops(int casas, int *contador) {
    for (int v = 0; v < casas; v++) {
        for (int h = 0; h < 1; h++) {
            printf("Bispo (Diagonal Direita-Cima)\n");
            (*contador)++;
        }
    }
}

// RAINHA: recursiva
void moverRainha(int casas, int *contador) {
    if (casas == 0) return;
    printf("Rainha (Direita)\n");
    (*contador)++;
    printf("Rainha (Diagonal Direita-Cima)\n");
    (*contador)++;
    moverRainha(casas - 1, contador);
}

// CAVALO: loops aninhados (for + while) simulando o movimento em "L"
void moverCavalo(int *contador) {
    // Define quantas casas o cavalo deve mover
    const int casasParaBaixo = 2;
    const int casasParaEsquerda = 1;

    printf("\n"); // Linha em branco para separar movimentos do Cavalo dos demais
    printf("Movimento do Cavalo:\n");

    // Primeiro loop: mover duas casas para baixo (loop for)
    for (int i = 0; i < casasParaBaixo; i++) {
        printf("Baixo\n");
        (*contador)++;
    }

    // Segundo loop: mover uma casa para esquerda (loop while)
    int j = 0;
    while (j < casasParaEsquerda) {
        printf("Esquerda\n");
        (*contador)++;
        j++;
    }
}

// SIMULA O MOVIMENTO DE UMA PEÇA
int simularMovimento(const char *peca) {
    int contador = 0;
    int casas = 3;

    if (strcmp(peca, "Torre") == 0) {
        moverTorre(casas, "Cima", &contador);
        moverTorre(casas, "Direita", &contador);
    } else if (strcmp(peca, "Bispo") == 0) {
        moverBispo(casas, &contador);
        moverBispoComLoops(casas, &contador);
    } else if (strcmp(peca, "Rainha") == 0) {
        moverRainha(2, &contador);
    } else if (strcmp(peca, "Cavalo") == 0) {
        moverCavalo(&contador);
    }

    return contador;
}

// TRADUZ A ESCOLHA NUMÉRICA PARA NOME DA PEÇA
const char* escolherPeca(int opcao) {
    switch (opcao) {
        case 1: return "Torre";
        case 2: return "Bispo";
        case 3: return "Rainha";
        case 4: return "Cavalo";
        default: return "Inválida";
    }
}

// -------- PROGRAMA PRINCIPAL --------
int main() {
    srand(time(NULL));

    int escolhaJogador;
    int escolhaComputador = rand() % 4 + 1;

    printf("===  Xadrez ===\n\n");
    printf("Escolha sua peça:\n");
    printf("1 - Torre\n2 - Bispo\n3 - Rainha\n4 - Cavalo\n");
    printf("Digite o número da sua escolha: ");
    scanf("%d", &escolhaJogador);

    // Nível intermediário: sem validação da entrada (requisito simplificado)
    // Mas vamos manter uma checagem simples para evitar erro no programa
    if (escolhaJogador < 1 || escolhaJogador > 4) {
        printf("Escolha inválida. Tente novamente.\n");
        return 1;
    }

    const char* pecaJogador = escolherPeca(escolhaJogador);
    const char* pecaComputador = escolherPeca(escolhaComputador);

    printf("\nVocê escolheu: %s\n", pecaJogador);
    printf("Computador escolheu: %s\n\n", pecaComputador);

    printf("=== Movimentos do Jogador (%s) ===\n", pecaJogador);
    int movimentosJogador = simularMovimento(pecaJogador);
    printf("\nTotal de movimentos do Jogador: %d\n", movimentosJogador);

    printf("\n=== Movimentos do Computador (%s) ===\n", pecaComputador);
    int movimentosComputador = simularMovimento(pecaComputador);
    printf("\nTotal de movimentos do Computador: %d\n", movimentosComputador);

    // Resultado final
    printf("\n=== RESULTADO FINAL ===\n");
    if (movimentosJogador > movimentosComputador) {
        printf("🎉 Você venceu!\n");
    } else if (movimentosJogador < movimentosComputador) {
        printf("💻 O computador venceu!\n");
    } else {
        printf("⚖️ Empate!\n");
    }

    return 0;
}
