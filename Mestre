#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

// -------- MOVIMENTOS DAS PEÇAS --------

// Função recursiva para mover a Torre em uma direção por "casas" vezes
void moverTorreRecursivo(int casas, const char *direcao, int *contador) {
    if (casas == 0) return;
    printf("%s\n", direcao);
    (*contador)++;
    moverTorreRecursivo(casas - 1, direcao, contador);
}

// Função recursiva para mover o Bispo na diagonal
void moverBispoRecursivo(int casas, int *contador) {
    if (casas == 0) return;
    printf("Cima\n");     // Movimento vertical
    printf("Direita\n");  // Movimento horizontal (diagonal)
    *contador += 2;
    moverBispoRecursivo(casas - 1, contador);
}

// Função com loops aninhados para o Bispo (loop externo vertical, interno horizontal)
void moverBispoLoopsAninhados(int casas, int *contador) {
    for (int vertical = 0; vertical < casas; vertical++) {
        for (int horizontal = 0; horizontal < 1; horizontal++) {
            printf("Cima\n");     // Vertical
            printf("Direita\n");  // Horizontal
            *contador += 2;
        }
    }
}

// Função recursiva para mover a Rainha combinando movimentos
void moverRainhaRecursivo(int casas, int *contador) {
    if (casas == 0) return;
    printf("Direita\n");
    (*contador)++;
    printf("Cima\n");
    (*contador)++;
    moverRainhaRecursivo(casas - 1, contador);
}

// Função com loops aninhados complexos para movimentar o Cavalo em "L" (2 casas cima, 1 direita)
// Utilizando múltiplas variáveis, continue e break para controle do fluxo
void moverCavaloLoopsComplexos(int *contador) {
    const int casasParaCima = 2;
    const int casasParaDireita = 1;

    printf("\n"); // Linha em branco para separar o movimento do Cavalo
    printf("Movimento do Cavalo (2 para cima e 1 para direita):\n");

    int movCima = 0;
    int movDireita = 0;

    for (int i = 0; i < 5; i++) {  // Limite arbitrário para controle, evita loop infinito
        if (movCima < casasParaCima) {
            printf("Cima\n");
            movCima++;
            (*contador)++;
            continue;  // Vai direto para próxima iteração para completar o movimento "para cima"
        }

        // Quando movCima estiver completo, começa o movimento para a direita
        if (movDireita < casasParaDireita) {
            printf("Direita\n");
            movDireita++;
            (*contador)++;
            // Após completar o movimento para direita, termina o loop
            break;
        }
    }
}

// Simula o movimento da peça passada como parâmetro
int simularMovimento(const char *peca) {
    int contador = 0;
    int casas = 3;

    if (strcmp(peca, "Torre") == 0) {
        // Torre se move recursivamente para cima e para direita
        moverTorreRecursivo(casas, "Cima", &contador);
        moverTorreRecursivo(casas, "Direita", &contador);

    } else if (strcmp(peca, "Bispo") == 0) {
        // Bispo recursivo
        moverBispoRecursivo(casas, &contador);
        // Bispo loops aninhados
        moverBispoLoopsAninhados(casas, &contador);

    } else if (strcmp(peca, "Rainha") == 0) {
        // Rainha recursiva
        moverRainhaRecursivo(casas, &contador);

    } else if (strcmp(peca, "Cavalo") == 0) {
        // Cavalo com loops complexos aninhados
        moverCavaloLoopsComplexos(&contador);
    }

    return contador;
}

// Retorna o nome da peça conforme a escolha
const char* escolherPeca(int opcao) {
    switch (opcao) {
        case 1: return "Torre";
        case 2: return "Bispo";
        case 3: return "Rainha";
        case 4: return "Cavalo";
        default: return "Inválida";
    }
}

// -------- PROGRAMA PRINCIPAL --------
int main() {
    srand(time(NULL));

    int escolhaJogador;
    int escolhaComputador = rand() % 4 + 1;

    printf("===  Xadrez ===\n\n");
    printf("Escolha sua peça:\n");
    printf("1 - Torre\n2 - Bispo\n3 - Rainha\n4 - Cavalo\n");
    printf("Digite o número da sua escolha: ");
    scanf("%d", &escolhaJogador);

    const char* pecaJogador = escolherPeca(escolhaJogador);
    const char* pecaComputador = escolherPeca(escolhaComputador);

    printf("\nVocê escolheu: %s\n", pecaJogador);
    printf("Computador escolheu: %s\n\n", pecaComputador);

    printf("=== Movimentos do Jogador (%s) ===\n", pecaJogador);
    int movimentosJogador = simularMovimento(pecaJogador);
    printf("\nTotal de movimentos do Jogador: %d\n", movimentosJogador);

    printf("\n=== Movimentos do Computador (%s) ===\n", pecaComputador);
    int movimentosComputador = simularMovimento(pecaComputador);
    printf("\nTotal de movimentos do Computador: %d\n", movimentosComputador);

    printf("\n=== RESULTADO FINAL ===\n");
    if (movimentosJogador > movimentosComputador) {
        printf("🎉 Você venceu!\n");
    } else if (movimentosJogador < movimentosComputador) {
        printf("💻 O computador venceu!\n");
    } else {
        printf("⚖️ Empate!\n");
    }

    return 0;
}
